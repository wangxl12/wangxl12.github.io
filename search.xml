<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>王争数据结构与算法学习笔记-数组</title>
    <url>/2021/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%8E%8B%E4%BA%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<blockquote>
<p><font size="4" face="楷体">数组看起来简单基础，但是很多人没有理解这个数据结构的精髓。<strong>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据</strong>。数组在逻辑上是一种线性表数据结构. 数组在物理上是一种顺序的存储结构。 数组定义的关键词:<br>1.连续的内存空间<br>2.相同类型的数据.<br><strong>线性表</strong>: 数据排成像一条线一样的结构.每个线性表上的数据最多只有前和后两个方向.<br><strong>非线性表</strong>: 数据之间并不是简单的前后关系. 线性表数据结构包括: 数组,链表,队列,栈. 非线性表数据结构包括: 二叉树,堆,图 。</font></p>
<blockquote>
<p><font size="4" face="楷体">1.数组的查找操作时间复杂度并不是$O(1)$。即便是排好的数组，用二分查找，时间复杂度也是$O(lgn)$。正确表述：数组支持随机访问，根据下标随机访问的时间复杂度为$O(1)$</font><br><font size="4" face="楷体">2.连续的内存空间和相同类型的数据：正是因为这两个限制，它才有了一个堪称“杀手锏”的特性：“随机访问”。这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</font></p>
</blockquote>
</blockquote>
<h2 id="数组是如何实现根据下标随机访问数组元素"><a href="#数组是如何实现根据下标随机访问数组元素" class="headerlink" title="数组是如何实现根据下标随机访问数组元素"></a>数组是如何实现根据下标随机访问数组元素</h2><p><font size="4" face="楷体">拿一个长度为 10 的 int 类型的数组 int[] a = new int[10]来举例。计算机给数组 a[10]，分配了一块连续内存空间 1000～1039，其中，内存块的首地址为 $base_{address}$ = 1000。</font></p>
<p><font size="4" face="楷体" color="gree">【注】此处使用的Java语言定义int类型，Java基本类型的整型分4中：byte、short、int、long，长度分别为1、2、4、8，所以此处int数组的每个值长度为4，所以分配的内存长度是10×4=40，此处内存分配从1000-1039共40个字节长度。</font></p>
<p><font size="4" face="楷体">计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：</font><br>$$<br>a[i]<em>{address} = base</em>{address} + i * data_{typeSize}<br>$$<br><font size="4" face="楷体">对于 m * n 的数组，a[i][j] (i &lt; m,j &lt; n)的地址为：</font><br>$$<br>a[i]<em>{address} = base</em>{address} + (i*n+j) * data_{typeSize}<br>$$<br><font size="4" face="楷体" color="red">【注】数组和链表的区别？很多人都回答说，“链表适合插入、删除，时间复杂度 $O(1)$；数组适合查找，查找时间复杂度为 $O(1)$”。这种表述是不准确的。数组是适合查找操作，但是查找的时间复杂度并不为 $O(1)$。即便是排好序的数组，用二分查找，时间复杂度也是 $O(lgn)$。所以，正确的表述应该是，数组支持随机访问，根据下标随机访问的时间复杂度为 $O(1)$。</font></p>
<h2 id="低效的“插入”和“删除”"><a href="#低效的“插入”和“删除”" class="headerlink" title="低效的“插入”和“删除”"></a>低效的“插入”和“删除”</h2><ul>
<li><font size="4" face="楷体">插入</font><br><font size="4" face="楷体">插入的位置不同,会导致针对同一段代码,我们的时间复杂度有量级的差距.<br>1.我们插入的位置位于数组的最后一位:不需要移动任何元素,最好时间复杂度为$O(1)$.<br>2.我们插入的位置位于数组的第一位,需要移动n个元素,最坏时间复杂度为$O(n)$.<br>3.平均时间复杂度.先把概率算清, 插入到任一位置的可能性都是一样的.$n$个位置.所以插入到每一个位置的概率都是$\frac{1}{n}$. 插入到数组的第一个位置需要移动$n$个元素. 插入到数组的第二个位置需要移动$n-1$个元素，以此类推，插入到数组中的最后一个位置，需要移动1个元素. </font></li>
</ul>
<p>$$<br>\frac{(n+n-1+n-2+···+1)}{n}=\frac{n+1}{2}=O(n)<br>$$</p>
<p><font size="4" face="楷体">所以: 数组插入操作的平均时间复杂度为$O(n)$​​.</font></p>
<p><font size="4" face="楷体" color="gree">如果数组中的数据是有序的，我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移$k$之后的数据。但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数据插入到第 $k$ 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 $k$ 位的数据搬移到数组元素的最后，把新的元素直接放入第 $k$ 个位置。</font></p>
<ul>
<li><font size="4" face="楷体">删除</font><br><font size="4" face="楷体">在不一定非得追求数组中数据的连续性的情况下。如果将多次删除操作集中在一起执行，删除的效率会提高很多，即：可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。类似于Java的垃圾回收核心算法。</font></li>
</ul>
<h2 id="警惕数组的访问越界问题"><a href="#警惕数组的访问越界问题" class="headerlink" title="警惕数组的访问越界问题"></a>警惕数组的访问越界问题</h2><p><font size="4" face="楷体">看看这段C语言代码：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(; i&lt;=<span class="number">3</span>; i++)&#123;</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font size="4" face="楷体">这段代码的运行结果并非是打印三行“hello world”，而是会无限打印“hello world”，因为数组大小为 3，a[0]，a[1]，a[2]，而for 循环的结束条件错写为了 i&lt;=3 而非 i&lt;3，所以当 i=3 时，数组 a[3]访问越界。在 C 语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。a[3]会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。数组越界在 C 语言中是一种未决行为，并没有规定数组访问越界时编译器应该如何处理。因为，访问数组的本质就是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，那么程序就可能不会报任何错误。</font><br><font size="4" face="楷体" color="gree">【注】：关于运行这段C程序会不会出现死循环，结果和编译器的实现有关，gcc有一个编译选项（-fno-stack-protector）用于关闭堆栈保护功能。默认情况下启动了堆栈保护，不管i声明在前还是在后，i都会在数组之后压栈，只会循环4次；如果关闭堆栈保护功能，则会出现死循环。请参考：<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gccstack/index.html">https://www.ibm.com/developerworks/cn/linux/l-cn-gccstack/index.html</a></font><br><font size="4" face="楷体" color="red">【注】：函数体内的局部变量存在栈上，且是连续压栈。在Linux进程的内存布局中，栈区在高地址空间，从高向低增长。变量i和arr在相邻地址，且i比arr的地址大，所以arr越界正好访问到i。当然，前提是i和arr元素同类型，否则那段代码仍是未决行为。</font></p>
<h2 id="容器能否完全替代数组？"><a href="#容器能否完全替代数组？" class="headerlink" title="容器能否完全替代数组？"></a>容器能否完全替代数组？</h2><p><font size="4" face="楷体">针对数组类型，很多语言都提供了容器类，比如 Java 中的 ArrayList、C++ STL 中的 vector。</font></p>
<p><font size="4" face="楷体">容器的底层都是数组，只不过对于Java中的容器而言，Vector是线程安全的，但是效率太低。ArrayList是非线程安全的，效率高。Vector是java早期版本使用的容器，而ArrayList则是java近期版本使用的容器，ArrayList的出现就是为了取代Vector的。平时使用的list等语言中的数据类型属于对其进行的封装，也称为容器，容器会帮助开发者自动实现一些功能去实现对数组的操作在项目开发中。</font></p>
<p><font size="4" face="楷体">对于业务开发，直接使用容器就足够了，省时省力。做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</font></p>
<h2 id="why大多数编程语言数组下标从0开始？"><a href="#why大多数编程语言数组下标从0开始？" class="headerlink" title="why大多数编程语言数组下标从0开始？"></a>why大多数编程语言数组下标从0开始？</h2><p><font size="4" face="楷体">从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。如果用 a 来表示数组的首地址，a[0]就是偏移为 0 的位置，也就是首地址，a[k]就表示偏移 k 个 type_size 的位置，所以计算 a[k]的内存地址:</font><br>$$<br>a[i]<em>{address} = base</em>{address} + i * data_{typeSize}<br>$$</p>
<p><font size="4" face="楷体">但是如果数组从 1 开始计数：<br>$a[i]<em>{address} = base</em>{address} + (i-1) * data_{typeSize}<br>$<br>从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。</font></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>刷算法---2021.08</title>
    <url>/2021/08/14/%E5%88%B7%E7%AE%97%E6%B3%95/%E5%88%B7%E7%AE%97%E6%B3%95-2021-08/</url>
    <content><![CDATA[<blockquote>
<p>从2021年8月中旬开始刷题。</p>
</blockquote>
<blockquote>
<p>本文将记录我在2021年8月中所刷过的题目，题目量不多，但是每一道保证理解透彻。</p>
</blockquote>
<h1 id="力扣26题：删除有序数组中的重复项"><a href="#力扣26题：删除有序数组中的重复项" class="headerlink" title="力扣26题：删除有序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">力扣26题：删除有序数组中的重复项</a></h1><p><img src="/2021/08/14/%E5%88%B7%E7%AE%97%E6%B3%95/%E5%88%B7%E7%AE%97%E6%B3%95-2021-08/leetcode26.png" alt="AC"></p>
<blockquote>
<p> 首先看清楚题目，这道题目说了是一个有序的数组，那么重复的元素必定是连续的，就连续这一特点我们可以摒弃平常用的字典计数的方法或者使用set的方法，而采用更加简便的方法。</p>
</blockquote>
<ul>
<li><font color="gree">思路1：双指针(时间复杂度O(n)，空间复杂度O(1))</font></li>
</ul>
<p>假设两个指针p和q，p在左边，q在右边，如果$nums[p]==nums[q]$，即两指针指向的元素值相等了，那么q指针右移一个单位，再次判断俩指针指向的值是否相等，如果还是相等，q指针继续移动；如果不相等，p指针移动一个单位，且$nums[p] = nums[q]$。</p>
<p>那么何时跳出循环呢？如果q到达了nums最后一个元素，那么说明了所有的元素都遍历了一遍，那么此时p所指向的就是不重复的元素的最后一个。</p>
<span id="more"></span>

<p>将上述过程写成伪代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=<span class="number">0</span>, q=<span class="number">1</span>, r=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> q &lt; nums.size():</span><br><span class="line">    <span class="keyword">if</span> nums[p] == nums[q]:</span><br><span class="line">        q++</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p++</span><br><span class="line">        nums[p] = nums[q]</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里需要注意的是，如果直接返回p结果是错的，因为测试的方式是p在nums中所对应的元素是不访问的，</span></span><br><span class="line"><span class="comment"># 所以需要返回p+1</span></span><br></pre></td></tr></table></figure>



<p>可以自行举个例子来将上述过程推演一遍：<br>nums = 0, 0, 1, 1, 1, 2, 2, 3, 3, 4。</p>
<p>完整代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (q &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[p] == nums[q]) &#123;</span><br><span class="line">                q++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p++;</span><br><span class="line">                nums[p] = nums[q];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码看起来不够简洁？将一些语句合并之后得到如下的版本：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">1</span>; q &lt; nums.<span class="built_in">size</span>(); q++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[p] != nums[q]) </span><br><span class="line">                nums[++p] = nums[q];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="gree">思路2：使用STL(时间复杂度O(n)，空间复杂度O(1))</font></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">distance</span>(nums.<span class="built_in">begin</span>(), </span><br><span class="line">        <span class="built_in">removeDuplicates</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), nums.<span class="built_in">begin</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>  InIt, <span class="keyword">typename</span> OutIt&gt;</span></span><br><span class="line"><span class="function">    OutIt <span class="title">removeDuplicates</span><span class="params">(InIt first, InIt last, OutIt output)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (first != last) &#123;</span><br><span class="line">            *output++ = *first;</span><br><span class="line">            first = <span class="built_in">upper_bound</span>(first, last, *first);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="gree">思路3：通用解法，将原问题的「最多保留 1 位」修改为「最多保留 k 位」。</font></li>
</ul>
<p>假设我们使用的$nums=[1, 1, 1, 2, 2, 3]$<br>我们仍然使用双指针法。这样的思路：</p>
<p>既然需要保留K个相同的数字，我们就用一个变量r来存储当前数字的相同的个数。一开始p指针指向index=0，q指针指向index=1，首先判断$nums[p]==nums[q]$是否成立，如果是的，我们需要判断计数器r的值是否超出了K的限定范围，如果超出了，那么只用q继续往后走，如果没有超出，我们让与p相距r个位置的数值=nums[q]，即：$nums[p+r] = nums[q]$；如果不成立，即此时$nums[p]!=nums[q]$，假设刚刚在遍历数字1，那么此时意味着此时数字1已经遍历完了，所以$nums[q]=2$，这个时候我们要将p指针指向这个新的数字的开端，即p=q。</p>
<p>这样写有什么问题？</p>
<p>如果p和q之间相差很多呢，比如1， 1， 1， 1， 1， 1，2，此时p指向第三个1，而q指向2，能将p直接指向q的2吗？显然不能！但是想起来我们用了一个计数器r，这就容易想到我们可以使用计数器来实现p指针的新指向：$p += r$。然后是一个新的数字了，所以计数器r需要更新为1，新的数字还要移动过来给p：$nums[p] = nums[q]$，这就是一个完整的循环需要做的事情。循环结束的标志？和K为1的时候一样，当q超出nums长度即停止。</p>
<p>综合上述流程的伪代码为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k=<span class="number">2</span>, p = <span class="number">0</span>, q = <span class="number">1</span>, r = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> q &lt; nums.size():</span><br><span class="line">	<span class="keyword">if</span> nums[p] == nums[q]:</span><br><span class="line">		nums[p + r] = nums[q]</span><br><span class="line">		r++, q++</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		p += r, r = <span class="number">1</span></span><br><span class="line">		nums[p] = nums[q]</span><br><span class="line">		q++</span><br></pre></td></tr></table></figure>

<p>使用C++来实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">2</span>, r = <span class="number">1</span>, p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; q &lt; nums.<span class="built_in">size</span>(); q++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (nums[p] == nums[q]) &#123;</span><br><span class="line">               <span class="keyword">if</span> (r &lt; k) &#123;</span><br><span class="line">                   nums[p + r] = nums[q];</span><br><span class="line">                   r++;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               p += r;</span><br><span class="line">               r = <span class="number">1</span>;</span><br><span class="line">               nums[p] = nums[q];</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>问题来了，将这段C++代码拿去运行发现只能通过部分案例，什么问题？仔细分析代码之后发现，如果在退出循环之前，进入的是else分支，那么p将得到更新：$p+=r$，如果经过的是if分支，p无法得到更新，直接退出循环！所以这里逻辑需要更改，可以直接在if分支中让每一次p+r吗?不行，因为r是不断增加的。我的解决方式是，每一次都让p更新一下，而不是到了最后一次性加上r，即在每一次遇到与nums[p]相同数字的时候，如果r&lt;k就马上更新p：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[p] == nums[q]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; k) &#123;</span><br><span class="line">        r++;</span><br><span class="line">        nums[++p] = nums[q];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以将else分支中的p+=r去掉：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//  p += r;</span></span><br><span class="line">    r = <span class="number">1</span>;</span><br><span class="line">    nums[++p] = nums[q];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整的代码为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">2</span>, r = <span class="number">1</span>, p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; q &lt; nums.<span class="built_in">size</span>(); q++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (nums[p] == nums[q]) &#123;</span><br><span class="line">               <span class="keyword">if</span> (r &lt; k) &#123;</span><br><span class="line">                   r++;</span><br><span class="line">                   nums[++p] = nums[q];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//               p += r;</span></span><br><span class="line">               r = <span class="number">1</span>;</span><br><span class="line">               nums[++p] = nums[q];</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这个搞定之后，可以顺便去把这道题给AC掉：<br><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/">80. 删除有序数组中的重复项 II</a></p>
<h1 id="力扣33题-搜索旋转排序数组"><a href="#力扣33题-搜索旋转排序数组" class="headerlink" title="力扣33题.搜索旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">力扣33题.搜索旋转排序数组</a></h1><p><img src="/2021/08/14/%E5%88%B7%E7%AE%97%E6%B3%95/%E5%88%B7%E7%AE%97%E6%B3%95-2021-08/leetcode33.png" alt="AC"></p>
<blockquote>
<p>这道题如果不去考虑时间复杂度的限制将是非常容易的遍历问题，但是本题的进阶方案是：设计一个时间复杂度为$O(log n)$的解决方案。</p>
<p>想到时间复杂度为$O(logn)$很容易思考到二分查找法，但是本题只是两部分有序的，所以直接用原本的二分查找行不通，需要进行修改，思路如下：</p>
</blockquote>
<p>假设输入的$nums={4,5,6,0,1,2,3}$。</p>
<p>初始$left=0,right=nums.size()$，每一次循环中，取$mid=(left+right)/2$，将序列最左端的值和target比较，有两种情况需要重点考虑：1. $num[left]&gt;target$，2. $num[left]&lt;target$，等于的话直接结束程序。</p>
<p>如果 $num[left]&gt;target$，$nums[mid]$有3种情况，一种是比target大，一种是比它小，最后就是相等。</p>
<ul>
<li>如果$nums[mid]&gt;target$​，还有两种情况，一种是$nums[mid]$​在$nums$​的最小值的左边，那么此时有：$nums[mid]&lt;target&lt;nums[right]$​，所以更新$left=mid$​；一种是在$nums$​的最小值的右边，这种情况下，$nums[mid]$​和$nums[right]$​均大于$target$​，所以需要更新$left=left,right=mid$​。</li>
<li>如果$nums[mid]&lt;target$，只有一种情况，更新为：$left=mid,right=right$。</li>
<li>如果$nums[mid]==target$，找到目标值。</li>
</ul>
<p>如果 $num[left]&lt;target$，$mid$同样有3中情况，即$nums[mid]&gt;target, nums[mid]&lt;target, nums[mid]==target$。</p>
<ul>
<li>如果$nums[mid]&gt;target$，只有一种情况，即：$nums[left]&lt;target&lt;nums[mid]$，更新为：$left=left, right=mid$</li>
<li>如果$nums[mid]&lt;target$​​​，有两种情况，一种是$nums[mid]$​​​在$nums$​​​最小值的左边，那么此时有：$nums[left]&lt;nums[mid]&lt;target$​​​，这种情况下，需要更新：$left=mid,right=right$​​​；另一种是$nums[mid]$​​​在$nums$​​​最小值的右边，此时有：$nums[left]&lt;target&lt;nums[mid]&lt;nums[right]$​​​，所以更新$left=left，right=mid$​​​。</li>
<li>如果$nums[mid]==target$​，找到目标值。</li>
</ul>
<p>将上述思路使用代码实现如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) <span class="comment">// mid在最小值的左边</span></span><br><span class="line">                        left = mid;</span><br><span class="line">                    <span class="keyword">else</span>                         <span class="comment">// mid在最小值的右边</span></span><br><span class="line">                        right = mid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                    left = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                    right = mid;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[mid] &gt;= nums[left])  <span class="comment">// mid在最小值的左边</span></span><br><span class="line">                        left = mid;</span><br><span class="line">                    <span class="keyword">else</span>                          <span class="comment">// mid在最小值的右边</span></span><br><span class="line">                        right = mid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这段代码并不能通过所有的实例，准确的说，很多实例都无法通过，一旦进入类似这样的情况：$[2, 3]，left=0, right=1,target=4$​，这种情况下，取$mid=(0+1)/2$，取整，得到$mid=0$，就会一直循环下去。</p>
<p>其实<font color="red">在二分法中，仅仅使用左右区间索引值之和的一半很容易出现这种循环，需要走出循环，一定需要通过加减来变化索引的值</font></p>
<p>比如我知道了$nums[mid]&lt;target$​，就取$left=mid+1$​，而不是$left=mid$。通过加减1走出循环将上述代码改为如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) <span class="comment">// mid在最小值的左边</span></span><br><span class="line">                        left = mid + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span>                         <span class="comment">// mid在最小值的右边</span></span><br><span class="line">                        right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[mid] &gt;= nums[left])  <span class="comment">// mid在最小值的左边</span></span><br><span class="line">                        left = mid + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span>                          <span class="comment">// mid在最小值的右边</span></span><br><span class="line">                        right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷算法</category>
      </categories>
      <tags>
        <tag>刷算法</tag>
      </tags>
  </entry>
</search>
