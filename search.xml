<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>刷算法---2021.08</title>
    <url>/2021/08/14/%E5%88%B7%E7%AE%97%E6%B3%95/%E5%88%B7%E7%AE%97%E6%B3%95-2021-08/</url>
    <content><![CDATA[<blockquote>
<p>从2021年8月中旬开始刷题。</p>
</blockquote>
<blockquote>
<p>本文将记录我在2021年8月中所刷过的题目，题目量不多，但是每一道保证理解透彻。</p>
</blockquote>
<p><img src="/.io//08/14/%E5%88%B7%E7%AE%97%E6%B3%95/%E5%88%B7%E7%AE%97%E6%B3%95-2021-08/leetcode26.png" alt="AC分数"></p>
<h1 id="力扣26题：删除有序数组中的重复项"><a href="#力扣26题：删除有序数组中的重复项" class="headerlink" title="力扣26题：删除有序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">力扣26题：删除有序数组中的重复项</a></h1><blockquote>
<p> 首先看清楚题目，这道题目说了是一个有序的数组，那么重复的元素必定是连续的，就连续这一特点我们可以摒弃平常用的字典计数的方法或者使用set的方法，而采用更加简便的方法。</p>
</blockquote>
<ul>
<li><font color="gree">思路1：双指针(时间复杂度O(n)，空间复杂度O(1))</font></li>
</ul>
<p>假设两个指针p和q，p在左边，q在右边，如果$nums[p]==nums[q]$，即两指针指向的元素值相等了，那么q指针右移一个单位，再次判断俩指针指向的值是否相等，如果还是相等，q指针继续移动；如果不相等，p指针移动一个单位，且$nums[p] = nums[q]$。</p>
<p>那么何时跳出循环呢？如果q到达了nums最后一个元素，那么说明了所有的元素都遍历了一遍，那么此时p所指向的就是不重复的元素的最后一个。</p>
<span id="more"></span>

<p>将上述过程写成伪代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=<span class="number">0</span>, q=<span class="number">1</span>, r=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> q &lt; nums.size():</span><br><span class="line">    <span class="keyword">if</span> nums[p] == nums[q]:</span><br><span class="line">        q++</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p++</span><br><span class="line">        nums[p] = nums[q]</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里需要注意的是，如果直接返回p结果是错的，因为测试的方式是p在nums中所对应的元素是不访问的，</span></span><br><span class="line"><span class="comment"># 所以需要返回p+1</span></span><br></pre></td></tr></table></figure>



<p>可以自行举个例子来将上述过程推演一遍：<br>nums = 0, 0, 1, 1, 1, 2, 2, 3, 3, 4。</p>
<p>完整代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (q &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[p] == nums[q]) &#123;</span><br><span class="line">                q++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p++;</span><br><span class="line">                nums[p] = nums[q];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码看起来不够简洁？将一些语句合并之后得到如下的版本：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">1</span>; q &lt; nums.<span class="built_in">size</span>(); q++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[p] != nums[q]) </span><br><span class="line">                nums[++p] = nums[q];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="gree">思路2：使用STL(时间复杂度O(n)，空间复杂度O(1))</font></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">distance</span>(nums.<span class="built_in">begin</span>(), </span><br><span class="line">        <span class="built_in">removeDuplicates</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), nums.<span class="built_in">begin</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>  InIt, <span class="keyword">typename</span> OutIt&gt;</span></span><br><span class="line"><span class="function">    OutIt <span class="title">removeDuplicates</span><span class="params">(InIt first, InIt last, OutIt output)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (first != last) &#123;</span><br><span class="line">            *output++ = *first;</span><br><span class="line">            first = <span class="built_in">upper_bound</span>(first, last, *first);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><font color="gree">思路3：通用解法，将原问题的「最多保留 1 位」修改为「最多保留 k 位」。</font></li>
</ul>
<p>假设我们使用的$nums=[1, 1, 1, 2, 2, 3]$<br>我们仍然使用双指针法。这样的思路：</p>
<p>既然需要保留K个相同的数字，我们就用一个变量r来存储当前数字的相同的个数。一开始p指针指向index=0，q指针指向index=1，首先判断$nums[p]==nums[q]$是否成立，如果是的，我们需要判断计数器r的值是否超出了K的限定范围，如果超出了，那么只用q继续往后走，如果没有超出，我们让与p相距r个位置的数值=nums[q]，即：$nums[p+r] = nums[q]$；如果不成立，即此时$nums[p]!=nums[q]$，假设刚刚在遍历数字1，那么此时意味着此时数字1已经遍历完了，所以$nums[q]=2$，这个时候我们要将p指针指向这个新的数字的开端，即p=q。</p>
<p>这样写有什么问题？</p>
<p>如果p和q之间相差很多呢，比如1， 1， 1， 1， 1， 1，2，此时p指向第三个1，而q指向2，能将p直接指向q的2吗？显然不能！但是想起来我们用了一个计数器r，这就容易想到我们可以使用计数器来实现p指针的新指向：$p += r$。然后是一个新的数字了，所以计数器r需要更新为1，新的数字还要移动过来给p：$nums[p] = nums[q]$，这就是一个完整的循环需要做的事情。循环结束的标志？和K为1的时候一样，当q超出nums长度即停止。</p>
<p>综合上述流程的伪代码为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k=<span class="number">2</span>, p = <span class="number">0</span>, q = <span class="number">1</span>, r = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> q &lt; nums.size():</span><br><span class="line">	<span class="keyword">if</span> nums[p] == nums[q]:</span><br><span class="line">		nums[p + r] = nums[q]</span><br><span class="line">		r++, q++</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		p += r, r = <span class="number">1</span></span><br><span class="line">		nums[p] = nums[q]</span><br><span class="line">		q++</span><br></pre></td></tr></table></figure>

<p>使用C++来实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">2</span>, r = <span class="number">1</span>, p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; q &lt; nums.<span class="built_in">size</span>(); q++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (nums[p] == nums[q]) &#123;</span><br><span class="line">               <span class="keyword">if</span> (r &lt; k) &#123;</span><br><span class="line">                   nums[p + r] = nums[q];</span><br><span class="line">                   r++;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               p += r;</span><br><span class="line">               r = <span class="number">1</span>;</span><br><span class="line">               nums[p] = nums[q];</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>问题来了，将这段C++代码拿去运行发现只能通过部分案例，什么问题？仔细分析代码之后发现，如果在退出循环之前，进入的是else分支，那么p将得到更新：$p+=r$，如果经过的是if分支，p无法得到更新，直接退出循环！所以这里逻辑需要更改，可以直接在if分支中让每一次p+r吗?不行，因为r是不断增加的。我的解决方式是，每一次都让p更新一下，而不是到了最后一次性加上r，即在每一次遇到与nums[p]相同数字的时候，如果r&lt;k就马上更新p：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[p] == nums[q]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; k) &#123;</span><br><span class="line">        r++;</span><br><span class="line">        nums[++p] = nums[q];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以将else分支中的p+=r去掉：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//  p += r;</span></span><br><span class="line">    r = <span class="number">1</span>;</span><br><span class="line">    nums[++p] = nums[q];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整的代码为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">2</span>, r = <span class="number">1</span>, p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; q &lt; nums.<span class="built_in">size</span>(); q++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (nums[p] == nums[q]) &#123;</span><br><span class="line">               <span class="keyword">if</span> (r &lt; k) &#123;</span><br><span class="line">                   r++;</span><br><span class="line">                   nums[++p] = nums[q];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//               p += r;</span></span><br><span class="line">               r = <span class="number">1</span>;</span><br><span class="line">               nums[++p] = nums[q];</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这个搞定之后，可以顺便去把这道题给AC掉：<br><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/">80. 删除有序数组中的重复项 II</a></p>
<h1 id="力扣33题-搜索旋转排序数组"><a href="#力扣33题-搜索旋转排序数组" class="headerlink" title="力扣33题.搜索旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">力扣33题.搜索旋转排序数组</a></h1><p><img src="/.io//08/14/%E5%88%B7%E7%AE%97%E6%B3%95/%E5%88%B7%E7%AE%97%E6%B3%95-2021-08/leetcode33.png" alt="AC"></p>
<blockquote>
<p>这道题如果不去考虑时间复杂度的限制将是非常容易的遍历问题，但是本题的进阶方案是：设计一个时间复杂度为$O(log n)$的解决方案。</p>
<p>想到时间复杂度为$O(logn)$很容易思考到二分查找法，但是本题只是两部分有序的，所以直接用原本的二分查找行不通，需要进行修改，思路如下：</p>
</blockquote>
<p>假设输入的$nums={4,5,6,0,1,2,3}$。</p>
<p>初始$left=0,right=nums.size()$，每一次循环中，取$mid=(left+right)/2$，将序列最左端的值和target比较，有两种情况需要重点考虑：1. $num[left]&gt;target$，2. $num[left]&lt;target$，等于的话直接结束程序。</p>
<p>如果 $num[left]&gt;target$，$nums[mid]$有3种情况，一种是比target大，一种是比它小，最后就是相等。</p>
<ul>
<li>如果$nums[mid]&gt;target$​，还有两种情况，一种是$nums[mid]$​在$nums$​的最小值的左边，那么此时有：$nums[mid]&lt;target&lt;nums[right]$​，所以更新$left=mid$​；一种是在$nums$​的最小值的右边，这种情况下，$nums[mid]$​和$nums[right]$​均大于$target$​，所以需要更新$left=left,right=mid$​。</li>
<li>如果$nums[mid]&lt;target$，只有一种情况，更新为：$left=mid,right=right$。</li>
<li>如果$nums[mid]==target$，找到目标值。</li>
</ul>
<p>如果 $num[left]&lt;target$，$mid$同样有3中情况，即$nums[mid]&gt;target, nums[mid]&lt;target, nums[mid]==target$。</p>
<ul>
<li>如果$nums[mid]&gt;target$，只有一种情况，即：$nums[left]&lt;target&lt;nums[mid]$，更新为：$left=left, right=mid$</li>
<li>如果$nums[mid]&lt;target$​​​，有两种情况，一种是$nums[mid]$​​​在$nums$​​​最小值的左边，那么此时有：$nums[left]&lt;nums[mid]&lt;target$​​​，这种情况下，需要更新：$left=mid,right=right$​​​；另一种是$nums[mid]$​​​在$nums$​​​最小值的右边，此时有：$nums[left]&lt;target&lt;nums[mid]&lt;nums[right]$​​​，所以更新$left=left，right=mid$​​​。</li>
<li>如果$nums[mid]==target$​，找到目标值。</li>
</ul>
<p>将上述思路使用代码实现如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) <span class="comment">// mid在最小值的左边</span></span><br><span class="line">                        left = mid;</span><br><span class="line">                    <span class="keyword">else</span>                         <span class="comment">// mid在最小值的右边</span></span><br><span class="line">                        right = mid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                    left = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                    right = mid;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[mid] &gt;= nums[left])  <span class="comment">// mid在最小值的左边</span></span><br><span class="line">                        left = mid;</span><br><span class="line">                    <span class="keyword">else</span>                          <span class="comment">// mid在最小值的右边</span></span><br><span class="line">                        right = mid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这段代码并不能通过所有的实例，准确的说，很多实例都无法通过，一旦进入类似这样的情况：$[2, 3]，left=0, right=1,target=4$​，这种情况下，取$mid=(0+1)/2$，取整，得到$mid=0$，就会一直循环下去。</p>
<p>其实<font color="red">在二分法中，仅仅使用左右区间索引值之和的一半很容易出现这种循环，需要走出循环，一定需要通过加减来变化索引的值</font></p>
<p>比如我知道了$nums[mid]&lt;target$​，就取$left=mid+1$​，而不是$left=mid$。通过加减1走出循环将上述代码改为如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) <span class="comment">// mid在最小值的左边</span></span><br><span class="line">                        left = mid + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span>                         <span class="comment">// mid在最小值的右边</span></span><br><span class="line">                        right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[mid] &gt;= nums[left])  <span class="comment">// mid在最小值的左边</span></span><br><span class="line">                        left = mid + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span>                          <span class="comment">// mid在最小值的右边</span></span><br><span class="line">                        right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷算法</category>
      </categories>
      <tags>
        <tag>刷算法</tag>
      </tags>
  </entry>
</search>
